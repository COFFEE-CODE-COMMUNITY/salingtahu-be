name: Build, Push and Deploy to Production VM

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_COMPOSE_FILE: docker-compose.production.yml
  REGISTRY: docker.io
  BACKEND_IMAGE: mhmtaufiq/salingtau-be
  FRONTEND_IMAGE: mhmtaufiq/salingtau-fe

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Image digest
        run: echo "Backend image pushed - ${{ steps.meta-backend.outputs.digest }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory on VM
        run: |
          sshpass -p '${{ secrets.VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "mkdir -p ~/salingtau-production"

      - name: Copy docker-compose file to VM
        run: |
          sshpass -p '${{ secrets.VM_PASSWORD }}' scp -o StrictHostKeyChecking=no \
            ${{ env.DOCKER_COMPOSE_FILE }} \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/salingtau-production/

      - name: Copy nginx configuration to VM
        run: |
          sshpass -p '${{ secrets.VM_PASSWORD }}' scp -o StrictHostKeyChecking=no \
            -r nginx ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/salingtau-production/

      - name: Deploy application
        run: |
          sshpass -p '${{ secrets.VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd ~/salingtau-production

            echo "Pulling latest Docker images..."
            docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} pull

            echo "Stopping existing containers..."
            docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} down

            echo "Starting containers..."
            docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d

            echo "Waiting for services to be healthy..."
            sleep 10

            echo "Checking container status..."
            docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps
          EOF

      - name: Health check
        run: |
          sshpass -p '${{ secrets.VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd ~/salingtau-production

            # Wait for services to be fully up
            for i in {1..30}; do
              if docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps | grep -q "Up"; then
                echo "Services are running"
                break
              fi
              echo "Waiting for services to start... ($i/30)"
              sleep 2
            done

            # Show container logs for debugging
            echo "Backend logs:"
            docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs --tail=20 backend

            echo "Frontend logs:"
            docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs --tail=20 frontend
          EOF

      - name: Cleanup old images
        run: |
          sshpass -p '${{ secrets.VM_PASSWORD }}' ssh -o StrictHostKeyChecking=no \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "Cleaning up old Docker images..."
            docker image prune -af --filter "until=24h"
          EOF

      - name: Send deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "Backend Image: ${{ env.BACKEND_IMAGE }}:latest"
            echo "Frontend Image: ${{ env.FRONTEND_IMAGE }}:latest"
          else
            echo "❌ Deployment failed!"
          fi
